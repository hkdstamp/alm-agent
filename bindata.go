// Code generated by go-bindata.
// sources:
// _data/addon_containers.toml
// _data/sys_containers.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __dataAddon_containersToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x31\x0a\x43\x21\x10\x05\x7b\x4f\xf1\xb0\x0f\xe9\x03\x9e\x44\x2c\x36\x71\x23\x82\xbb\x06\x5c\x05\x6f\x1f\xfc\xcd\x2f\x67\x18\x26\x46\xca\xb9\x6b\x4a\x0e\x50\x12\x46\x80\xcf\x53\x64\x7b\x07\x54\xa1\x72\x19\xab\xa4\x5d\x9f\xa3\x31\xff\xaa\x96\xc7\x9b\x69\xda\x7e\x35\x32\x1e\x76\x4a\xd6\xf5\x9d\xfa\x19\x08\x88\x67\xb5\x7a\xbb\xf9\x1f\x00\x00\xff\xff\xb0\x5a\xe3\x92\x64\x00\x00\x00")

func _dataAddon_containersTomlBytes() ([]byte, error) {
	return bindataRead(
		__dataAddon_containersToml,
		"_data/addon_containers.toml",
	)
}

func _dataAddon_containersToml() (*asset, error) {
	bytes, err := _dataAddon_containersTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_data/addon_containers.toml", size: 100, mode: os.FileMode(420), modTime: time.Unix(1503673319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __dataSys_containersToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x31\x0e\xc2\x30\x0c\x45\xf7\x9c\xe2\xab\x8b\x17\x10\x27\xe8\xd6\xa5\x67\x88\x32\x98\x28\x44\x16\x89\x2d\xe1\x10\xae\x8f\xca\x82\xd4\xf5\xff\xf7\x5e\x8c\xd9\x74\xb0\x68\x79\xa5\x14\x00\xe5\x5e\xb0\x62\xe1\xd6\xaf\xfc\xf1\x66\xd5\x97\x00\x48\xe7\xfa\xdb\xbb\xdd\x45\xab\xdc\x4e\x7f\xd1\xf9\x78\x6b\x76\xac\x88\xe4\x83\xf3\x73\xdf\xe8\x02\x12\xf5\xc1\x9a\xcb\xbe\xd1\x51\x9f\xd6\xfe\xd8\xe1\x4e\x6b\x94\xc2\x37\x00\x00\xff\xff\x9d\xe8\x0c\xdc\x85\x00\x00\x00")

func _dataSys_containersTomlBytes() ([]byte, error) {
	return bindataRead(
		__dataSys_containersToml,
		"_data/sys_containers.toml",
	)
}

func _dataSys_containersToml() (*asset, error) {
	bytes, err := _dataSys_containersTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_data/sys_containers.toml", size: 133, mode: os.FileMode(420), modTime: time.Unix(1503673087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_data/addon_containers.toml": _dataAddon_containersToml,
	"_data/sys_containers.toml": _dataSys_containersToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"_data": &bintree{nil, map[string]*bintree{
		"addon_containers.toml": &bintree{_dataAddon_containersToml, map[string]*bintree{}},
		"sys_containers.toml": &bintree{_dataSys_containersToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

